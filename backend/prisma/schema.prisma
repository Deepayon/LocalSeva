generator client {
provider = "prisma-client-js"
}

datasource db {
provider = "sqlite"
url = env("DATABASE_URL")
}

model User {
id String @id @default(cuid())
phone String @unique
name String?
email String? @unique
avatar String?
verified Boolean @default(false)
trustScore Int @default(0)
neighborhoodId String?
role String @default("user") // user, admin
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

// Authentication fields
otpCode String?
otpExpires DateTime?
isActive Boolean @default(true)
lastLoginAt DateTime?

neighborhood Neighborhood? @relation(fields: [neighborhoodId], references: [id], onDelete: SetNull, onUpdate: Cascade)

// Relations
waterSchedules WaterSchedule[]
powerOutages PowerOutage[]
lostItems LostItem[]
foundItems FoundItem[]
skills Skill[]
queueUpdates QueueUpdate[]
parkingSpots ParkingSpot[]
bookings Booking[]
reviews Review[]
reviewsReceived Review[] @relation("UserReviews")
notifications Notification[]
sessions Session[]

@@index([neighborhoodId])
@@map("users")
}

model Neighborhood {
id String @id @default(cuid())
name String
city String
state String
pincode String
latitude Float
longitude Float
radius Float @default(0.5) // 500m radius
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

users User[]
waterSchedules WaterSchedule[]
powerOutages PowerOutage[]
lostItems LostItem[]
foundItems FoundItem[]
skills Skill[]
queueUpdates QueueUpdate[]
parkingSpots ParkingSpot[]

@@index([city, state])
@@index([pincode])
@@map("neighborhoods")
}

model WaterSchedule {
id String @id @default(cuid())
userId String
neighborhoodId String
startTime DateTime
endTime DateTime
waterPressure Int? // 1-10 scale
notes String?
verified Boolean @default(false)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
neighborhood Neighborhood @relation(fields: [neighborhoodId], references: [id], onDelete: Cascade, onUpdate: Cascade)

@@index([neighborhoodId, startTime])
@@map("water_schedules")
}

model PowerOutage {
id String @id @default(cuid())
userId String
neighborhoodId String
startTime DateTime
endTime DateTime?
isPlanned Boolean @default(false)
reason String?
verified Boolean @default(false)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
neighborhood Neighborhood @relation(fields: [neighborhoodId], references: [id], onDelete: Cascade, onUpdate: Cascade)

@@index([neighborhoodId, startTime])
@@map("power_outages")
}

model LostItem {
id String @id @default(cuid())
userId String
neighborhoodId String
title String
description String
category String
imageUrl String?
lostAt DateTime
lostLocation String
reward Float? @default(0)
status String @default("lost") // lost, found, resolved
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
neighborhood Neighborhood @relation(fields: [neighborhoodId], references: [id], onDelete: Cascade, onUpdate: Cascade)

@@index([neighborhoodId, createdAt])
@@map("lost_items")
}

model FoundItem {
id String @id @default(cuid())
userId String
neighborhoodId String
title String
description String
category String
imageUrl String?
foundAt DateTime
foundLocation String
status String @default("available") // available, claimed, resolved
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
neighborhood Neighborhood @relation(fields: [neighborhoodId], references: [id], onDelete: Cascade, onUpdate: Cascade)

@@index([neighborhoodId, createdAt])
@@map("found_items")
}

model Skill {
id String @id @default(cuid())
userId String
neighborhoodId String
title String
description String
category String
skillLevel String // beginner, intermediate, expert
isOffering Boolean // true = offering, false = seeking
isActive Boolean @default(true)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
neighborhood Neighborhood @relation(fields: [neighborhoodId], references: [id], onDelete: Cascade, onUpdate: Cascade)

@@index([neighborhoodId, isOffering, category])
@@map("skills")
}

model QueueUpdate {
id String @id @default(cuid())
userId String
neighborhoodId String
locationName String
locationType String // bank, hospital, government_office, etc.
currentNumber Int
estimatedTime Int? // minutes
lastUpdated DateTime @default(now())
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
neighborhood Neighborhood @relation(fields: [neighborhoodId], references: [id], onDelete: Cascade, onUpdate: Cascade)

@@index([neighborhoodId, locationType, lastUpdated])
@@map("queue_updates")
}

model ParkingSpot {
id String @id @default(cuid())
userId String
neighborhoodId String
title String
description String
address String
latitude Float
longitude Float
pricePerHour Float
isAvailable Boolean @default(true)
vehicleType String // car, bike, scooter
features String // covered, security, ev_charging, etc. (comma-separated)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
neighborhood Neighborhood @relation(fields: [neighborhoodId], references: [id], onDelete: Cascade, onUpdate: Cascade)
bookings Booking[]

@@index([neighborhoodId, isAvailable])
@@index([latitude, longitude])
@@map("parking_spots")
}

model Booking {
id String @id @default(cuid())
userId String
parkingSpotId String
startTime DateTime
endTime DateTime
totalPrice Float
status String @default("pending") // pending, confirmed, completed, cancelled
paymentStatus String @default("pending") // pending, paid, refunded
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
parkingSpot ParkingSpot @relation(fields: [parkingSpotId], references: [id], onDelete: Cascade, onUpdate: Cascade)

@@index([userId, createdAt])
@@index([parkingSpotId, startTime])
@@map("bookings")
}

model Review {
id String @id @default(cuid())
userId String
targetUserId String
rating Int // 1-5 (validate in app layer for SQLite)
comment String?
category String // service, parking, general
createdAt DateTime @default(now())

user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
targetUser User @relation("UserReviews", fields: [targetUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)

@@index([targetUserId, createdAt])
@@map("reviews")
}

model Notification {
id String @id @default(cuid())
userId String
title String
message String
type String // water, power, lost_found, skill, queue, parking
isRead Boolean @default(false)
createdAt DateTime @default(now())

user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

@@index([userId, isRead, createdAt])
@@map("notifications")
}

model Session {
id String @id @default(cuid())
userId String
sessionToken String @unique
expires DateTime
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

@@index([userId])
@@map("sessions")
}